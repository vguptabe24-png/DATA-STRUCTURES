
#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;
    Node(int val) {
        data = val;
        next = NULL;
    }
};

class LinkedList {
public:
    Node* head;

    LinkedList() {
        head = NULL;
    }

    // Insert node at the end
    void insertEnd(int val) {
        Node* newNode = new Node(val);
        if (head == NULL) {
            head = newNode;
            return;
        }
        Node* temp = head;
        while (temp->next != NULL)
            temp = temp->next;
        temp->next = newNode;
    }

    // Function to create a loop for testing
    void createLoop(int pos) {
        if (pos == 0) return;
        Node* temp = head;
        Node* loopNode = NULL;
        int count = 1;
        while (temp->next != NULL) {
            if (count == pos)
                loopNode = temp;
            temp = temp->next;
            count++;
        }
        temp->next = loopNode;  // creating a loop
    }

    // Detect and remove loop (Floyd’s Cycle Detection method)
    void removeLoop() {
        Node *slow = head, *fast = head;

        // Detect loop
        while (slow != NULL && fast != NULL && fast->next != NULL) {
            slow = slow->next;
            fast = fast->next->next;
            if (slow == fast) {
                break;
            }
        }

        // If loop exists
        if (slow == fast) {
            slow = head;
            // Special case: when loop starts at head
            if (slow == fast) {
                while (fast->next != slow)
                    fast = fast->next;
            } else {
                while (slow->next != fast->next) {
                    slow = slow->next;
                    fast = fast->next;
                }
            }
            fast->next = NULL; // Remove loop
        }
    }

    // Display list
    void display() {
        Node* temp = head;
        while (temp != NULL) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main() {
    LinkedList list;
    list.insertEnd(1);
    list.insertEnd(7);
    list.insertEnd(3);
    list.insertEnd(6);

    // Creating loop for test: 6 → 7
    list.createLoop(2);

    list.removeLoop(); // Removes loop if it exists

    cout << "Linked List after removing loop: ";
    list.display();

    return 0;
}
