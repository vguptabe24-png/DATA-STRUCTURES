
#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;
    Node(int val) {
        data = val;
        next = NULL;
    }
};

class LinkedList {
public:
    Node* head;

    LinkedList() {
        head = NULL;
    }

    // Function to insert node at the end
    void insertEnd(int val) {
        Node* newNode = new Node(val);
        if (head == NULL) {
            head = newNode;
            return;
        }
        Node* temp = head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }

    // Function to reverse nodes in groups of K
    Node* reverseInGroups(Node* head, int k) {
        Node* current = head;
        Node* prev = NULL;
        Node* next = NULL;
        int count = 0;

        // Reverse first k nodes
        while (current != NULL && count < k) {
            next = current->next;
            current->next = prev;
            prev = current;
            current = next;
            count++;
        }

        // Recursively reverse next groups
        if (next != NULL)
            head->next = reverseInGroups(next, k);

        return prev;
    }

    // Function to reverse using class head
    void reverseGroups(int k) {
        head = reverseInGroups(head, k);
    }

    // Function to display the list
    void display() {
        Node* temp = head;
        while (temp != NULL) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main() {
    LinkedList list;
    // Example: Linked list = 1->2->3->4->5->6->7->8->9, K = 3
    list.insertEnd(1);
    list.insertEnd(2);
    list.insertEnd(3);
    list.insertEnd(4);
    list.insertEnd(5);
    list.insertEnd(6);
    list.insertEnd(7);
    list.insertEnd(8);
    list.insertEnd(9);

    cout << "Original List: ";
    list.display();

    int k = 3;
    list.reverseGroups(k);

    cout << "Reversed in groups of " << k << ": ";
    list.display();

    return 0;
}

