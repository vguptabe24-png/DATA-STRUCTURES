
#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
};

// Function to find length of a linked list
int getLength(Node* head) {
    int length = 0;
    while (head != NULL) {
        length++;
        head = head->next;
    }
    return length;
}

// Function to get intersection node
Node* getIntersection(Node* head1, Node* head2) {
    int len1 = getLength(head1);
    int len2 = getLength(head2);

    // Move the longer list's head forward by difference in lengths
    int diff = abs(len1 - len2);

    if (len1 > len2) {
        for (int i = 0; i < diff; i++)
            head1 = head1->next;
    } else {
        for (int i = 0; i < diff; i++)
            head2 = head2->next;
    }

    // Move both heads one by one until they meet
    while (head1 != NULL && head2 != NULL) {
        if (head1 == head2)
            return head1;  // Intersection found
        head1 = head1->next;
        head2 = head2->next;
    }

    return NULL; // No intersection
}

// Helper function to print a list
void printList(Node* head) {
    while (head != NULL) {
        cout << head->data << "->";
        head = head->next;
    }
    cout << "NULL" << endl;
}

int main() {
    // Create two linked lists:
    // listA = 4->1->8->5
    // listB = 5->6->1->8->5
    // Intersection at node with value 8

    // Common part
    Node* common1 = new Node{8, NULL};
    Node* common2 = new Node{5, NULL};
    common1->next = common2;

    // List A
    Node* head1 = new Node{4, NULL};
    head1->next = new Node{1, NULL};
    head1->next->next = common1;

    // List B
    Node* head2 = new Node{5, NULL};
    head2->next = new Node{6, NULL};
    head2->next->next = new Node{1, NULL};
    head2->next->next->next = common1;

    cout << "List A: ";
    printList(head1);
    cout << "List B: ";
    printList(head2);

    Node* intersection = getIntersection(head1, head2);

    if (intersection != NULL)
        cout << "Intersected at " << intersection->data << endl;
    else
        cout << "No intersection found." << endl;

    return 0;
}

