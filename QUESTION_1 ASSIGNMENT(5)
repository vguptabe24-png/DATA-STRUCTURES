
#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;

    Node(int value) {
        data = value;
        next = nullptr;
    }
};

class SinglyLinkedList {
    Node* head;

public:
    SinglyLinkedList() {
        head = nullptr;
    }

    // (a) Insert at Beginning
    void insertAtBeginning(int value) {
        Node* newNode = new Node(value);
        newNode->next = head;
        head = newNode;
    }

    // (b) Insert at End
    void insertAtEnd(int value) {
        Node* newNode = new Node(value);
        if (!head) {
            head = newNode;
            return;
        }
        Node* temp = head;
        while (temp->next)
            temp = temp->next;
        temp->next = newNode;
    }

    // (c) Insert Before a Specific Node
    void insertBefore(int value, int target) {
        if (!head) {
            cout << "List is empty!\n";
            return;
        }
        if (head->data == target) {
            insertAtBeginning(value);
            return;
        }
        Node* temp = head;
        while (temp->next && temp->next->data != target)
            temp = temp->next;
        if (!temp->next)
            cout << "Target not found!\n";
        else {
            Node* newNode = new Node(value);
            newNode->next = temp->next;
            temp->next = newNode;
        }
    }

    // (c) Insert After a Specific Node
    void insertAfter(int value, int target) {
        Node* temp = head;
        while (temp && temp->data != target)
            temp = temp->next;
        if (!temp)
            cout << "Target not found!\n";
        else {
            Node* newNode = new Node(value);
            newNode->next = temp->next;
            temp->next = newNode;
        }
    }

    // (d) Delete from Beginning
    void deleteFromBeginning() {
        if (!head) {
            cout << "List is empty!\n";
            return;
        }
        Node* temp = head;
        head = head->next;
        delete temp;
    }

    // (e) Delete from End
    void deleteFromEnd() {
        if (!head) {
            cout << "List is empty!\n";
            return;
        }
        if (!head->next) {
            delete head;
            head = nullptr;
            return;
        }
        Node* temp = head;
        while (temp->next->next)
            temp = temp->next;
        delete temp->next;
        temp->next = nullptr;
    }

    // (f) Delete a Specific Node
    void deleteSpecific(int value) {
        if (!head) {
            cout << "List is empty!\n";
            return;
        }
        if (head->data == value) {
            Node* temp = head;
            head = head->next;
            delete temp;
            return;
        }
        Node* temp = head;
        while (temp->next && temp->next->data != value)
            temp = temp->next;
        if (!temp->next)
            cout << "Node not found!\n";
        else {
            Node* toDelete = temp->next;
            temp->next = temp->next->next;
            delete toDelete;
        }
    }

    // (g) Search for a Node
    void searchNode(int value) {
        Node* temp = head;
        int pos = 1;
        while (temp) {
            if (temp->data == value) {
                cout << "Node found at position: " << pos << endl;
                return;
            }
            temp = temp->next;
            pos++;
        }
        cout << "Node not found!\n";
    }

    // (h) Display All Nodes
    void displayList() {
        if (!head) {
            cout << "List is empty!\n";
            return;
        }
        Node* temp = head;
        cout << "Linked List: ";
        while (temp) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

// Main Function (Menu)
int main() {
    SinglyLinkedList list;
    int choice, value, target;

    while (true) {
        cout << "\nSingly Linked List Menu\n";
        cout << "1. Insert at Beginning\n";
        cout << "2. Insert at End\n";
        cout << "3. Insert Before a Node\n";
        cout << "4. Insert After a Node\n";
        cout << "5. Delete from Beginning\n";
        cout << "6. Delete from End\n";
        cout << "7. Delete Specific Node\n";
        cout << "8. Search Node\n";
        cout << "9. Display List\n";
        cout << "10. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            cout << "Enter value: ";
            cin >> value;
            list.insertAtBeginning(value);
            break;
        case 2:
            cout << "Enter value: ";
            cin >> value;
            list.insertAtEnd(value);
            break;
        case 3:
            cout << "Enter value to insert: ";
            cin >> value;
            cout << "Insert before which value? ";
            cin >> target;
            list.insertBefore(value, target);
            break;
        case 4:
            cout << "Enter value to insert: ";
            cin >> value;
            cout << "Insert after which value? ";
            cin >> target;
            list.insertAfter(value, target);
            break;
        case 5:
            list.deleteFromBeginning();
            break;
        case 6:
            list.deleteFromEnd();
            break;
        case 7:
            cout << "Enter value to delete: ";
            cin >> value;
            list.deleteSpecific(value);
            break;
        case 8:
            cout << "Enter value to search: ";
            cin >> value;
            list.searchNode(value);
            break;
        case 9:
            list.displayList();
            break;
        case 10:
            cout << "Exiting...\n";
            return 0;
        default:
            cout << "Invalid choice!\n";
        }
    }
}
