#include <iostream>
using namespace std;

// Queue class using array or linked list logic (simple)
class Queue {
    int arr[100];   // fixed size for simplicity
    int front, rear, size;

public:
    Queue() {
        front = 0;
        rear = -1;
        size = 0;
    }

    bool isEmpty() {
        return size == 0;
    }

    void enqueue(int x) {
        if (rear == 99) {
            cout << "Queue full!\n";
            return;
        }
        rear++;
        arr[rear] = x;
        size++;
    }

    int dequeue() {
        if (isEmpty()) {
            cout << "Queue empty!\n";
            return -1;
        }
        int x = arr[front];
        front++;
        size--;
        return x;
    }

    int getSize() {
        return size;
    }

    // Function to get the minimum element's index in first 'n' elements
    int minIndex(int n) {
        int min_index = -1;
        int min_value = 999999;
        for (int i = 0; i < n; i++) {
            int curr = dequeue();
            if (curr < min_value && i < n) {
                min_value = curr;
                min_index = i;
            }
            enqueue(curr);
        }
        return min_index;
    }

    // Move the element at min_index to the rear
    void moveMinToRear(int min_index, int n) {
        int min_value;
        for (int i = 0; i < n; i++) {
            int curr = dequeue();
            if (i == min_index)
                min_value = curr;
            else
                enqueue(curr);
        }
        enqueue(min_value);
    }

    // Sort queue using only queue operations
    void sortQueue() {
        for (int i = 1; i <= getSize(); i++) {
            int min_index = minIndex(getSize() - i + 1);
            moveMinToRear(min_index, getSize() - i + 1);
        }
    }

    // Display queue elements
    void display() {
        for (int i = front; i <= rear; i++) {
            cout << arr[i];
            if (i < rear)
                cout << ", ";
        }
        cout << endl;
    }
};

// Main function
int main() {
    Queue q;

    q.enqueue(11);
    q.enqueue(5);
    q.enqueue(4);
    q.enqueue(21);

    cout << "Original Queue: ";
    q.display();

    q.sortQueue();

    cout << "Sorted Queue: ";
    q.display();

    return 0;
}
