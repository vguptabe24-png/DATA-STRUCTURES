#include <iostream>
#include <stack>
using namespace std;

class SpecialStack {
    stack<long long> st;
    long long minEle;

public:
    void push(long long x) {
        if (st.empty()) {
            st.push(x);
            minEle = x;
        } else if (x >= minEle) {
            st.push(x);
        } else {
            // Encode and update min
            st.push(2*x - minEle);
            minEle = x;
        }
    }

    void pop() {
        if (st.empty()) return;

        long long t = st.top();
        st.pop();

        if (t < minEle) {
            // Restore previous min
            minEle = 2*minEle - t;
        }
    }

    long long top() {
        if (st.empty()) return -1;

        long long t = st.top();
        if (t < minEle)
            return minEle; // encoded value means real top = minEle
        return t;
    }

    long long getMin() {
        if (st.empty()) return -1;
        return minEle;
    }

    bool empty() {
        return st.empty();
    }
};

int main() {
    SpecialStack s;
    s.push(5);
    s.push(2);
    s.push(10);
    s.push(1);

    cout << "Current Min: " << s.getMin() << endl;  // 1
    s.pop();
    cout << "After one pop, Min: " << s.getMin() << endl;  // 2
    cout << "Top Element: " << s.top() << endl;    // 10

    return 0;
}
